/*2 x N 크기의 직사각형을 1 x 2, 2 x 1 타일로 채우는
방법의 수를 구하는 프로그램
타일을 채우는 방법의 수를 10,007로 나눈 나머지를 출력

동적 프로그래밍의 핵심은 규칙성 파악을 통한 점화식 도출이다.
이번 문제의 경우 가장 마지막에 오는 타일을 기준으로 
2가지 경우로 나눌 수 있다. 맨 마지막에 2x1타일이 오는 경우와
1x2타일이 오는 경우이다.
따라서 점화식을 세워보면 D[i] = D[i-1]+D[i-2}가 된다.
*/
#include<iostream>
using namespace std;
int d[1001];

int dp(int x) {
	if (x == 1) return 1;//초기값 설정 및 종료 시점
	if (x == 2) return 2;
	if (d[x] != 0) return d[x];//값이 있다면(이미 계산이 되었다면) 그대로 반환(연산하지 마라)
	return d[x] = (dp(x - 1) + dp(x - 2)) % 10007;
}//점화식에 따라 dp함수가 재귀적으로 수행
//ex) dp(5) = dp(4) + dp(3) = dp(3) + dp(2) + dp(3) + dp(2)...꼴로 수행되어 연산됨.

int main(void) {
	int x;
	cin >> x;
	cout << dp(x);
	return 0;
}
